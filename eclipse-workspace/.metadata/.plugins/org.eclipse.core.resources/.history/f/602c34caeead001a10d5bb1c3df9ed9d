import java.io.*;
import java.util.*;
public class Screate 
{
	static employee Schedule[][]  = new employee[7][6];//[Days in the week][number of shifts available per day]
	static ArrayList<employee> totalEmployee = new ArrayList<>();

	public static void main(String[] args) 
	{
		String file = "C:\\Users\\Iliyan\\Desktop\\Schedule.txt";
		getData(file);
		createSchedule(totalEmployee);
		
		for(int i = 0; i <Schedule.length;i++)
		{
			System.out.println("Day of Week: " + i);
			for(int j = 0; j < Schedule[i].length;j++)
			{
				if(Schedule[i][j] != null)
					System.out.print(Schedule[i][j].name);
			}
		}		
	}
	
	static void createSchedule(ArrayList<employee> employee)
	{
		
		for(int i = 0; i < Schedule.length;i++)
		{
			for(int j = 0; j < Schedule[i].length;j++)
			{
				for(int k = 0; k < totalEmployee.size(); k++)
				{
					switch(j)
					{
					
					case 0:
						if(totalEmployee.get(k).hoursAvailable[0] <= 12 && totalEmployee.get(k).hoursAvailable [1] >= 5 && contains(totalEmployee.get(k).WeekAvailability,"M"))
						{
							Schedule[i][j] = totalEmployee.get(k);								
						}					
					break;
					
					case 1:
						if(totalEmployee.get(k).hoursAvailable[0] <= 5 && totalEmployee.get(k).hoursAvailable [1] >= 8 && contains(totalEmployee.get(k).WeekAvailability,"T"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 2:
						if(totalEmployee.get(k).hoursAvailable[0] <= 5 && totalEmployee.get(k).hoursAvailable [1] >= 9 && contains(totalEmployee.get(k).WeekAvailability,"W"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 3:
						if(totalEmployee.get(k).hoursAvailable[0] <= 7 && totalEmployee.get(k).hoursAvailable [1] >= 11 && contains(totalEmployee.get(k).WeekAvailability,"TH"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 4:
						if(totalEmployee.get(k).hoursAvailable[0] <= 8 && totalEmployee.get(k).hoursAvailable [1] >= 12 && contains(totalEmployee.get(k).WeekAvailability,"F"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 5:
						if(totalEmployee.get(k).hoursAvailable[0] <= 8 && totalEmployee.get(k).hoursAvailable [1] >= 3 && contains(totalEmployee.get(k).WeekAvailability,"SA"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 6:
						if(totalEmployee.get(k).hoursAvailable[0] <= 12 && totalEmployee.get(k).hoursAvailable [1] >= 5 && contains(totalEmployee.get(k).WeekAvailability,"SU"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					}
					
					
					if(Schedule[i][j] != null)
					{
						k = totalEmployee.size();
					}
					for(int l = 0; l < Schedule[i].length; l++)
					{
						if(Schedule[i][j] != null)
						if(Schedule[i][l].name.contains(totalEmployee.get(k).name) && totalEmployee.get(k).doubles == 'n')
						{
							Schedule[i][j] = null;	
						}
					}
				}
			}
		}
	}
	
	static void getData(String file)
	{
		File f = null;
		Scanner scnr = null;
		Scanner line = null;
		try 
		{
			f = new File(file);
			scnr = new Scanner(f);
		} 
		catch (FileNotFoundException e)
		{
			System.err.println("Error Invalid File Location: " + file); 
			return;
		}

		scnr.nextLine();
		try
		{
			
			while(scnr.hasNextLine())
			{
				line = new Scanner(scnr.nextLine());
				
				String[] availability = new String[7];
				int[] DaysToWork = new int[2];
				
				String name = line.next();					//Get name of Employee
				int priority = line.nextInt();				//Get their prioiryt out of 3
				char doubles = line.next().charAt(0);		//y/n for doubles
				DaysToWork[0] = line.nextInt();	
				line.next();
				DaysToWork[1] = line.nextInt();					
				for(int i = 0;line.hasNext();i++)
					{
						String temp = line.next();
						availability[i] = temp;				
					}
				line.close();
				employee temp = new employee(priority,name,DaysToWork,availability,doubles);
				totalEmployee.add(temp);
			}	

		}
		catch(Exception e)
		{
			System.err.println("Error Parsing Data Incorrect Formating for File: " + file);
			scnr.close();
			return;
		}
				
		totalEmployee = sortA(totalEmployee);
		scnr.close();
		
	}
	
	public static ArrayList<employee> sortA(ArrayList<employee> list) 
	{		
		for (int i = 0; i < list.size()-1; i++) 
			if (list.get(i).priority < list.get(i+1).priority) 
			{
				employee temp = list.get(i+1);
				list.remove(i+1);
				list.add(i, temp);				
			}
		
		return list;		
	}
	
	public static boolean contains(String[] array, String input)
	{
		for(int i = 0; i < array.length; i++)
			if(array[i].contains(input))
				return true;
		return false;
	}
	

}
