import java.io.*;
import java.util.*;
public class Screate 
{
	private static ArrayList<ArrayList<ArrayList<Integer>>> Schedule = new ArrayList<>();;
	private static ArrayList<employee> totalEmployee = new ArrayList<>();
	private static ArrayList<ArrayList<ArrayList<Integer>>> shiftsAvailable = new ArrayList<>();

	public static void main(String[] args) 
	{
		String nLine = " g";
		System.out.println(nLine.equals("") || nLine.matches("( +)"));
		String file = "C:\\Users\\Iliyan\\Desktop\\Schedule.txt";
		getData(file);
		System.out.print(totalEmployee);
		
		for(int i = 0;i<shiftsAvailable.size();i++)
		{
			System.out.println("Day: " + (i + 1));
			for(int j = 0; j < shiftsAvailable.get(i).size();j++)
			{
				System.out.println("	Shift " + (j + 1));
				for(int k = 0; k < shiftsAvailable.get(i).get(j).size(); k++)
				{
					System.out.println("		Times: " + shiftsAvailable.get(i).get(k).get(k));
				}
			}
		}
	}
	
	protected static void createSchedule()
	{
		
		for(int i = 0; i < Schedule.length;i++)
		{
			for(int j = 0; j < Schedule[i].length;j++)
			{
				for(int k = 0; k < totalEmployee.size(); k++)
				{
					switch(j)
					{
					
					case 0:
						if(totalEmployee.get(k).hoursAvailable[0] <= 12 && totalEmployee.get(k).hoursAvailable [1] >= 5 && contains(totalEmployee.get(k).WeekAvailability,"M"))
						{
							Schedule[i][j] = totalEmployee.get(k);								
						}					
					break;
					
					case 1:
						if(totalEmployee.get(k).hoursAvailable[0] <= 5 && totalEmployee.get(k).hoursAvailable [1] >= 8 && contains(totalEmployee.get(k).WeekAvailability,"T"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 2:
						if(totalEmployee.get(k).hoursAvailable[0] <= 5 && totalEmployee.get(k).hoursAvailable [1] >= 9 && contains(totalEmployee.get(k).WeekAvailability,"W"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 3:
						if(totalEmployee.get(k).hoursAvailable[0] <= 7 && totalEmployee.get(k).hoursAvailable [1] >= 11 && contains(totalEmployee.get(k).WeekAvailability,"TH"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 4:
						if(totalEmployee.get(k).hoursAvailable[0] <= 8 && totalEmployee.get(k).hoursAvailable [1] >= 12 && contains(totalEmployee.get(k).WeekAvailability,"F"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 5:
						//System.out.println(totalEmployee.get(k).WeekAvailability[0]);
						if(totalEmployee.get(k).hoursAvailable[0] <= 8 && totalEmployee.get(k).hoursAvailable [1] >= 3 && contains(totalEmployee.get(k).WeekAvailability,"SA"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					
					case 6:
						if(totalEmployee.get(k).hoursAvailable[0] <= 12 && totalEmployee.get(k).hoursAvailable [1] >= 5 && contains(totalEmployee.get(k).WeekAvailability,"SU"))
						{
							Schedule[i][j] = totalEmployee.get(k);
						}
					break;
					}
					
					//i is day of week
					//j is the shift of that day
					//k is the current employee
					
					int numOfWorked = 0;
					for(int l = 0; l < Schedule[i].length; l++)
						if(Schedule[i][l] != null)
						{
							if(Schedule[i][l].name.contains(totalEmployee.get(k).name) && totalEmployee.get(k).doubles == 'n')	
							{
								Schedule[i][j] = null;
								break;
							}
							
						
							
							else if(Schedule[i][l].name.contains(totalEmployee.get(k).name))
							{
								numOfWorked++;
							}
							if(numOfWorked > 2)
							{
								Schedule[i][j] = null;
							}
						}
							
						if(Schedule[i][j] != null)					
							k = totalEmployee.size();					
				}
			}
		}
	}
	
	protected static void getData(String file)
	{
		File f = null;
		Scanner scnr = null;
		Scanner line = null;
		try 
		{
			f = new File(file);
			scnr = new Scanner(f);
		} 
		catch (FileNotFoundException e)
		{
			System.err.println("Error Invalid File Location: " + file); 
			return;
		}

		scnr.nextLine();
		try
		{	
			for(int i = 0; i < 7; i++)									//Loops 7 times to get all 7 days shifts
			{
				ArrayList<ArrayList<Integer>> day = new ArrayList<>(); 	//Stores the arraylist of in times for that day
				line = new Scanner(scnr.nextLine()); 					//Scanner for the current line of the file
				line.next();											//Skips White Space
				while(line.hasNext())
				{					
					String combinedTimes = line.next();					//Gets Available Shift Times in TTam-TTpm format						
					day.add(convertTime(combinedTimes));				//Adds the current hours worked into day				
				}
				shiftsAvailable.add(day);								//Adds day to the shifts available
			}
			scnr.nextLine();
			scnr.nextLine();											//Skips two lines in order to pass white space and get to employees
			
			
			
			while(scnr.hasNextLine())
			{
				line = new Scanner(scnr.nextLine());
				if(line.hasNext())
				{
					String nLine = line.next();
					if(!nLine.equals("") || !nLine.matches(" +"))				//Checks if the new Line is blank or only has spaces in it
					{
						String eName = nLine;
						int ePriority = line.nextInt();
						char eDoubles = line.next().charAt(0);
						String cAvailability = line.next();
						ArrayList<Integer> eHoursAvailable = convertTime(cAvailability);
						ArrayList<ArrayList<Integer>> eDaysAvailable = new ArrayList<>();
					
						for(int i = 0; i < 7; i++)
							eDaysAvailable.add(null);
				
						while(line.hasNext())
						{
							String next = line.next();
							if(next.contains("am") || next.contains("pm"))
								eHoursAvailable = convertTime(next);
						
							else
							{ 
								int index = convertDay(next);
								eDaysAvailable.set(index,eHoursAvailable);
							}
						}
						employee temp = new employee(eName,ePriority,eDoubles,eDaysAvailable);
						totalEmployee.add(temp);
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.err.println("Error Parsing Data Incorrect Formating for File: " + file);
			scnr.close();
			return;
		}
				
		totalEmployee = sortA(totalEmployee);
		scnr.close();
		
	}
	
	protected static ArrayList<Integer> convertTime(String cTime)
	{
		ArrayList<Integer> hours = new ArrayList<>();		//Makes a new ArrayLis for the hours available for that day		
		String[] splitTimes = cTime.split("-");				//Creates an array of the two in time with 
		for(int j = 0; j < splitTimes.length; j++)			//Goes through array list to remove am and pm notation
		{
			if(splitTimes[j].contains("am"))
				hours.add(Integer.valueOf(splitTimes[j].replace("am","")));			//Uses 24 hour format for am leave as is
			
			else if(splitTimes[j].contains("pm"))
				hours.add(Integer.valueOf(splitTimes[j].replace("pm", "")) + 12);	//For pm add 12 hours to convert into 24 hour format
		}
		return hours;
	}
	
	protected static int convertDay(String day)
	{
		int dayWorking = -1;
		switch(day)
		{
		case "M":  dayWorking = 0;
			break;
		case "T":  dayWorking = 1;
			break;
		case "W":  dayWorking = 2;
			break;
		case "TH": dayWorking = 3;
			break;
		case "F":  dayWorking = 4;
			break;
		case "SA": dayWorking = 5;
			break;
		case "SU": dayWorking = 6;
			break;			
		}
		return dayWorking;
	}
	
	protected static ArrayList<employee> sortA(ArrayList<employee> list) 
	{		
		for (int i = 0; i < list.size()-1; i++) 
			if (list.get(i).priority < list.get(i+1).priority) 
			{
				employee temp = list.get(i+1);
				list.remove(i+1);
				list.add(i, temp);				
			}
		
		return list;		
	}
	
	protected static boolean contains(String[] array, String input)
	{	
		for(int i = 0; i < array.length; i++)
			if(array[i] != null)
				if(array[i].equals(input))
					return true;
		
		return false;
	}
	
	
	

}
