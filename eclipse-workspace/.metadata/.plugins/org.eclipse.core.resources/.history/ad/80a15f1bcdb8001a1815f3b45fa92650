//Author Iliyan Dimitrov
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class Screate 
{
	private static ArrayList<ArrayList<employee>> Schedule = new ArrayList<>();
	private static ArrayList<employee> totalEmployee = new ArrayList<>();
	private static ArrayList<ArrayList<ArrayList<Integer>>> shiftsAvailable = new ArrayList<>();
	private static boolean debug;

	public static void main(String[] args) 
	{
		debug = true;
		String file = "C:\\Users\\Iliyan\\Desktop\\Schedule.txt";
		getData(file);
		createSchedule();
		//exportSchedule();
		JOptionPane.showMessageDialog(null, "Succesfully Finished Creating Schedule");

		
		
		if(debug)
		{
			System.out.print(totalEmployee);

			for(int i = 0;i<shiftsAvailable.size();i++)
			{
				System.out.println("Day: " + (i + 1));
				for(int j = 0; j < shiftsAvailable.get(i).size();j++)
				{
					System.out.println("	Shift " + (j + 1));
					for(int k = 0; k < shiftsAvailable.get(i).get(j).size(); k++)
					{
						System.out.println("		Times: " + shiftsAvailable.get(i).get(k).get(k) + "\n\n");
					}
				}
			}
			
			for(int i = 0; i < Schedule.size(); i++)
			{
				System.out.println("Scheduled Day: " + i);
				for(int j = 0; j < Schedule.get(i).size();j++)
				{
					if(Schedule.get(i).get(j).DaysWorking[i][0][0] != 0 && Schedule.get(i).get(j).DaysWorking[i][0][1] != 0)
					System.out.println("	Name: " + Schedule.get(i).get(j).name + " Times: " + Schedule.get(i).get(j).DaysWorking[i][0][0] + "-" + Schedule.get(i).get(j).DaysWorking[i][0][1]);
				}
			}
		}
		
		
		
		
	}
	
	protected static void exportSchedule()
	{
		
	}
	
	protected static void createSchedule()
	{
		ArrayList<employee> temp = new ArrayList<>();
		for(int i = 0; i < 7; i++)
			Schedule.add(temp);
		
		
		
		for(int i = 0; i < shiftsAvailable.size(); i++)							//Gets the day
		{
			for(int j = 0; j < shiftsAvailable.get(i).size();j++)				//Gets the shift
			{
				EmployeeFinished:
				for(int k = 0; k < totalEmployee.size(); k++)					//Gets employee
				{
					if(totalEmployee.get(k).availability.get(i) != null)
					{
						if((totalEmployee.get(k).availability.get(i).get(0) <= shiftsAvailable.get(i).get(j).get(0)) && (totalEmployee.get(k).availability.get(i).get(1) >= shiftsAvailable.get(i).get(j).get(1)))
						{	
							boolean employeeIsValid = true;
							for(int l = 0; l < totalEmployee.get(k).DaysWorking[i].length; l++) //Fix should be chekcing below for availability not days working
							{
								if((totalEmployee.get(k).DaysWorking[i][l][0] >= shiftsAvailable.get(i).get(j).get(0)) && (totalEmployee.get(k).DaysWorking[i][l][1] <= shiftsAvailable.get(i).get(j).get(1)))
									if((totalEmployee.get(k).DaysWorking[i][l][0] <= shiftsAvailable.get(i).get(j).get(0)) && (totalEmployee.get(k).DaysWorking[i][l][1] > shiftsAvailable.get(i).get(j).get(0)))
										if((totalEmployee.get(k).DaysWorking[i][l][0] <= shiftsAvailable.get(i).get(j).get(0)) && (totalEmployee.get(k).DaysWorking[i][l][1] > shiftsAvailable.get(i).get(j).get(1)))
											employeeIsValid = false;
							
								if(employeeIsValid && totalEmployee.get(k).DaysWorking[i][l][0] == 0 && totalEmployee.get(k).DaysWorking[i][l][1] == 0 && employeeIsValid == true)
								{
									totalEmployee.get(k).DaysWorking[i][l][0] = shiftsAvailable.get(i).get(j).get(0);
									totalEmployee.get(k).DaysWorking[i][l][1] = shiftsAvailable.get(i).get(j).get(1);
									Schedule.get(i).add(totalEmployee.get(k));
									System.out.println("Shift emp start: " + totalEmployee.get(k).availability.get(i).get(0) + ": Shift end: " + totalEmployee.get(k).availability.get(i).get(1));
									System.out.println("Shift start: " +shiftsAvailable.get(i).get(j).get(0) + ": shift end: " + shiftsAvailable.get(i).get(j).get(1));
									j++;
									break EmployeeFinished;
								}
							}
						}						
					}
				}
			}
		}
	}
	
	protected static void getData(String file)
	{
		File f = null;
		Scanner scnr = null;
		Scanner line = null;
		try 
		{
			f = new File(file);
			scnr = new Scanner(f);
		} 
		catch (FileNotFoundException e)
		{
			JOptionPane.showMessageDialog(null, "Error Invalid File Location: " + file);
			System.err.println("Error Invalid File Location: " + file); 
			System.exit(0);
		}

		scnr.nextLine();
		try
		{	
			for(int i = 0; i < 7; i++)									//Loops 7 times to get all 7 days shifts
			{
				ArrayList<ArrayList<Integer>> day = new ArrayList<>(); 	//Stores the arraylist of in times for that day
				line = new Scanner(scnr.nextLine()); 					//Scanner for the current line of the file
				line.next();											//Skips White Space
				while(line.hasNext())
				{					
					String combinedTimes = line.next();					//Gets Available Shift Times in TTam-TTpm format						
					day.add(convertTime(combinedTimes));				//Adds the current hours worked into day				
				}
				shiftsAvailable.add(day);								//Adds day to the shifts available
			}
			scnr.nextLine();
			scnr.nextLine();
			scnr.nextLine();											//Skips two lines in order to pass white space and get to employees
			
			
			
			while(scnr.hasNextLine())
			{
				line = new Scanner(scnr.nextLine());
				if(line.hasNext())
				{
					String nLine = line.next();
					if(!nLine.equals("") || !nLine.matches(" +"))				//Checks if the new Line is blank or only has spaces in it
					{
						String eName = nLine;
						int ePriority = line.nextInt();
						char eDoubles = line.next().charAt(0);
						String cAvailability = line.next();
						ArrayList<Integer> eHoursAvailable = convertTime(cAvailability);
						ArrayList<ArrayList<Integer>> eDaysAvailable = new ArrayList<>();
					
						for(int i = 0; i < 7; i++)
							eDaysAvailable.add(null);
				
						while(line.hasNext())
						{
							String next = line.next();
							if(next.contains("am") || next.contains("pm"))
								eHoursAvailable = convertTime(next);
						
							else
							{ 
								int index = convertDay(next);
								eDaysAvailable.set(index,eHoursAvailable);
							}
						}
						employee temp = new employee(eName,ePriority,eDoubles,eDaysAvailable);
						totalEmployee.add(temp);
					}
				}
			}
		}
		catch(Exception e)
		{
			JOptionPane.showMessageDialog(null, "Error Parsing Data Incorrect Formating for File: " + file);
			System.err.println("Error Parsing Data Incorrect Formating for File: " + file);
			scnr.close();
			System.exit(0);
		}
				
		totalEmployee = sortA(totalEmployee);
		scnr.close();
		
	}
	
	protected static ArrayList<Integer> convertTime(String cTime)
	{
		ArrayList<Integer> hours = new ArrayList<>();		//Makes a new ArrayLis for the hours available for that day		
		String[] splitTimes = cTime.split("-");				//Creates an array of the two in time with 
		for(int j = 0; j < splitTimes.length; j++)			//Goes through array list to remove am and pm notation
		{
			if(splitTimes[j].contains("am"))
				hours.add(Integer.valueOf(splitTimes[j].replace("am","")));			//Uses 24 hour format for am leave as is
			
			else if(splitTimes[j].contains("pm"))
				hours.add(Integer.valueOf(splitTimes[j].replace("pm", "")) + 12);	//For pm add 12 hours to convert into 24 hour format
		}
		return hours;
	}
	
	protected static int convertDay(String day)
	{
		int dayWorking = -1;
		switch(day)
		{
		case "M":  dayWorking = 0;
			break;
		case "T":  dayWorking = 1;
			break;
		case "W":  dayWorking = 2;
			break;
		case "TH": dayWorking = 3;
			break;
		case "F":  dayWorking = 4;
			break;
		case "SA": dayWorking = 5;
			break;
		case "SU": dayWorking = 6;
			break;			
		}
		return dayWorking;
	}
	
	protected static ArrayList<employee> sortA(ArrayList<employee> list) 
	{		
		for (int i = 0; i < list.size()-1; i++) 
			if (list.get(i).priority < list.get(i+1).priority) 
			{
				employee temp = list.get(i+1);
				list.remove(i+1);
				list.add(i, temp);				
			}
		
		return list;		
	}
	
	protected static boolean contains(String[] array, String input)
	{	
		for(int i = 0; i < array.length; i++)
			if(array[i] != null)
				if(array[i].equals(input))
					return true;
		
		return false;
	}
	
}
